<#@ output  extension="txt" #>
<#@ template language="C#v3.5" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="SFSdotNet.VSAddin2012.Model" #>
<#@ import namespace="SFSdotNet.VSAddin2012.Model.Utils" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
// <Template>
//   <SolutionTemplate></SolutionTemplate>
//   <Version>20110117.1</Version>
//   <Update></Update>
// </Template>


<#+ void GenerateGeneric( EntityInfo entity){ 
	try{
		
		
		string folderModelsName = entityPluralName;
		if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "RelativeFolder", "String"))){
			folderModelsName = (string)GetCustomProperty(entity, "RelativeFolder", "String");
		}
	
		string focusField = "";
		bool UIEntityExtended = false;
		string entityName =entity.Name;
		string modelName = entity.Name + "Model";
	#>
<%@ Page Title="" Language="C#" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage<<#= entity.Model.Namespace #>.Web.Mvc.Models.<#= folderModelsName #>.<#= modelName #>>" %>
<%@ Import Namespace="<#= entity.Model.Namespace #>.Web.Mvc.Resources" %>
<asp:Content ID="Content1" ContentPlaceHolderID="TitleContent" runat="server">
<%: <#= entity.Name #>Resources.<#= entityPluralName.ToUpper() #>_EDIT  %>
</asp:Content>

<asp:Content ID="Content2" ContentPlaceHolderID="MainContent" runat="server">
<div class="<%=Config.GetValue("parentformclass").ToString() %> alpha omega details" >
	<div class="spacetop spacebottom">
<% 	string pathview = ViewData["viewpath"] != null ? (string)ViewData["viewpath"] : "";
	string extensionview = ViewData["viewpath"] != null ? ".ascx" : "";

	%>
<% Html.RenderPartial(pathview + "<#= entity.Name #>ViewGen" + extensionview); %>

<#+ if (entity.NavigationProperties.Count > 0 || (bool)GetCustomProperty(entity, "UICreateChilds", "Boolean")) { #>    
	<div class="childs">
        <% Html.RenderPartial(pathview + "<#= entity.Name #>ChildsViewGen" + extensionview); %>
    </div>
<#+ } #>	
	
<#+ if ((bool)GetCustomProperty(entity, "UIFooterInclude", "Boolean")) { #>
	<% Html.RenderPartialIfExist(pathview + "Footer<#= entity.Name #>" + extensionview, Model); %>	
<#+ } #>	

	</div>
</div>
</asp:Content>

<asp:Content ID="Content3" ContentPlaceHolderID="CustomScript" runat="server">
<% 	string pathview = ViewData["viewpath"] != null ? (string)ViewData["viewpath"] : "";
	string extensionview = ViewData["viewpath"] != null ? ".ascx" : "";

	%>
<%= Html.HeaderResources("popup") %>
<%= Html.HeaderResources("datepicker") %>
<#+ if (entity.NavigationProperties.Count > 0) { #>
<%= Html.HeaderResources("simplelist") %>
<%= Html.HeaderResources("pagination") %>
<%= Html.HeaderResources("tabs") %>
<#+ } #>
<%= Html.HeaderResources("form") %>
<#+ if (entity.Properties.Where(p=>p.Type == "String" && p.MaxLength ==0).Count()> 0)  {#>
<%= Html.HeaderResources("richeditor") %>
<#+ } #>


<#+ if ((bool)GetCustomProperty(entity, "UIHeaderInclude", "Boolean")){
#>
<% Html.RenderPartialIfExist(pathview + "Header<#= entity.Name #>" + extensionview, Model); %>

<#+	}
#>
</asp:Content>

<asp:Content ID="Content4" ContentPlaceHolderID="LeftContent" runat="server">
</asp:Content>

<asp:Content ID="Content5" ContentPlaceHolderID="RightContent" runat="server">
</asp:Content>

<#+ 
	}catch(Exception ex){
			throw new Exception(string.Format("El error ocurrió en la entidad {0}",entity.Name),ex);
		}
} #>





<#+ void GenerateGenericView(EntityInfo entity)
{
	try{
		
	string defaultFormMode = "edit";
	if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "UIFormMode", "String"))){
		defaultFormMode = (string)GetCustomProperty(entity, "UIFormMode", "String");
	}
		
		
	string folderModelsName = entityPluralName;
	if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "RelativeFolder", "String"))){
		folderModelsName = (string)GetCustomProperty(entity, "RelativeFolder", "String");
	}

		if (!string.IsNullOrEmpty(entity.SetName)){
			entityPluralName = entity.SetName;
		}else{
			entityPluralName = Code.MakePlural(entity.Name);
		}
	string focusField = "";
	bool UIEntityExtended = false;
	string modelName = entity.Name + "Model";
	
#>
<%@ Control Language="C#" Inherits="System.Web.Mvc.ViewUserControl<<#= entity.Model.Namespace #>.Web.Mvc.Models.<#= folderModelsName #>.<#= modelName #>>" %>
<%@ Import Namespace="<#= entity.Model.Namespace #>.Web.Mvc.Resources" %>
<%  string pathview = ViewData["viewpath"] != null ? (string)ViewData["viewpath"] : "";
	string extensionview = ViewData["viewpath"] != null ? ".ascx" : "";

	if (!string.IsNullOrEmpty(Request.QueryString["popup"]))
   { %>
<#+ if ((bool)GetCustomProperty(entity, "UIHeaderInclude", "Boolean")){
#>
		<% Html.RenderPartialIfExist("Header<#= entity.Name #>", Model); %>

<#+	}
#>
   <div class="popup" id="popup_<#= entity.Name #>">
    <div class="container_16">
  <%} %>
<%
    string fromFK = "";
    if (ViewData["fk"] != null)
        fromFK = ViewData["fk"].ToString();
   
     string fkValue = "";
    if (ViewData["fkValue"] != null)
        fkValue = ViewData["fkValue"].ToString();
    var popupextra = new RouteValueDictionary(); 
    //if(!string.IsNullOrEmpty(Request.QueryString["popup"]))
          //popupextra.Add("popup", 1);

		<#+ 
	int UIGridFormColumns = 16;
	int UILabelColumns =6;
	if (!string.IsNullOrEmpty((string)GetCustomProperty(entity.Model, "UIGridFormColumns", "String"))) {
		UIGridFormColumns =int.Parse((string)GetCustomProperty(entity.Model, "UIGridFormColumns", "String"));
	}
	if (!string.IsNullOrEmpty((string)GetCustomProperty(entity.Model, "UILabelColumns", "String"))) {
		UILabelColumns =int.Parse((string)GetCustomProperty(entity.Model, "UILabelColumns", "String"));
	}
	string UIPopupColumns = "12";
	string UIPopupLabelColumns = "4";
	if (!string.IsNullOrEmpty((string)GetCustomProperty(entity.Model, "UIPopupColumns", "String"))) {
		UIPopupColumns =(string)GetCustomProperty(entity.Model, "UIPopupColumns", "String");
	}
	if (!string.IsNullOrEmpty((string)GetCustomProperty(entity.Model, "UIPopupLabelColumns", "String"))) {
		UIPopupLabelColumns =(string)GetCustomProperty(entity.Model, "UIPopupLabelColumns", "String");
	}
	
	#>
	string UIGridFormColumns = "<#= UIGridFormColumns #>";
    string UILabelColumns = "<#= UILabelColumns #>";
    if(!string.IsNullOrEmpty(Request.QueryString["popup"])){
          
		UIGridFormColumns = "<#= UIPopupColumns #>";
        UILabelColumns = "<#= UIPopupLabelColumns #>";
		}
		
	foreach (var qs in Request.QueryString.AllKeys)
    {
		if (!string.IsNullOrEmpty(Request.QueryString[qs]))
        	popupextra.Add(qs, Request.QueryString[qs]);
    }   
%>

<div class="grid_<%=UIGridFormColumns.ToString() %> alpha omega" >
	<div class="spacetop spacebottom">
	<% Html.EnableClientValidation(); %>
<#+ 
	
	int UIGridMaxColumns =1;
		if (!string.IsNullOrEmpty((string)GetCustomProperty(entity.Model, "UIGridMaxColumns", "String"))){
		UIGridMaxColumns = int.Parse((string)GetCustomProperty(entity.Model, "UIGridMaxColumns", "String"));
			
		if ((bool)GetCustomProperty(entity, "UIMultiColumn", "Boolean")){
			//
			if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "UIGridMaxColumns", "String")))
				UIGridMaxColumns = int.Parse((string)GetCustomProperty(entity, "UIGridMaxColumns", "String"));
			
		}else{
			UIGridMaxColumns=1; 
		}
	}
		string controllerName = entityPluralName;
		string actionName = "";
		if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "DefaultActionForm", "String"))){
			actionName = (string)GetCustomProperty(entity, "DefaultActionForm", "String");
		}
		if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "ControllerName", "String")))
		{
			controllerName =(string)GetCustomProperty(entity, "ControllerName", "String");
		}

	#>	
 		<div class="form col<#= UIGridMaxColumns.ToString() #> edit">
			<% 
                bool isnew = false;
                if (Model != null) {
                    isnew = Model.IsNew;
                }	    	    
			if (isnew) { %>
 		<%      if (!string.IsNullOrEmpty(Request.QueryString["popup"]))
                    { %>
				<% Ajax.BeginForm("<#= actionName != ""?actionName: "CreateGen" #>", "<#= controllerName #>", popupextra , new AjaxOptions() { UpdateTargetId = "popup_<#= entity.Name #>", InsertionMode = InsertionMode.Replace, OnSuccess = "onMessageSuccess" }); %>
            <%      }else{ %>
				<% Html.BeginForm("<#= actionName != ""?actionName: "CreateGen" #>", "<#= controllerName #>", popupextra); %>
  			<%      } %>  			<h2><%: <#= entity.Name #>Resources.<#= entityPluralName.ToUpper() #>_ADD_NEW %></h2>
			<% }else{ %>

  			<h2><%: <#= entity.Name #>Resources.<#= entityPluralName.ToUpper() #>_EDIT %></h2>			
	
            <%      if (!string.IsNullOrEmpty(Request.QueryString["popup"]))
                    { %>
				<% Ajax.BeginForm("<#= actionName != ""?actionName: "EditGen" #>", "<#= controllerName #>", popupextra, new AjaxOptions() { UpdateTargetId = "popup_<#= entity.Name #>", InsertionMode = InsertionMode.Replace, OnSuccess = "onMessageSuccess" }); %>
            <%      }
                    else
                    { %>
				<% Html.BeginForm("<#= actionName != ""?actionName: "EditGen" #>", "<#= controllerName #>", popupextra); %>
            <%      } %>
<#+ foreach (PropertyInfo property in entity.Properties.Where(p=>p.IsPrimaryKey || (bool)GetCustomProperty(p, "IsHidden", "Boolean"))) { #>				
				<%: Html.HiddenFor(m=>m.<#= property.Name #>) %>
<#+ } #>
			<%            }%>		

			<div class="line"></div>
    		<%= Html.ValidationSummary(GlobalMessages.VAL_FIX_ERROR_PLEASE)%>
<#+ string gridClassContainer= "";
	string gridClassField= "";
	decimal uiSpace = 0.00m;
	int rowNumber = 1;
	int cols = 0;
	decimal sumRowCols = 0.00m;
	int UIGridColumns = 16;

	if (!string.IsNullOrEmpty((string)GetCustomProperty(entity.Model, "UIGridColumns", "String"))){
		UIGridColumns = int.Parse((string)GetCustomProperty(entity.Model, "UIGridColumns", "String"));		
	}
		if (!string.IsNullOrEmpty((string)GetCustomProperty(entity.Model, "UIGridFormColumns", "String"))){
		UIGridFormColumns = int.Parse((string)GetCustomProperty(entity.Model, "UIGridFormColumns", "String"));		
	}
	if ((bool)GetCustomProperty(entity, "UIMultiColumn", "Boolean")){
		if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "UIGridMaxColumns", "String"))){
			UIGridMaxColumns = int.Parse((string)GetCustomProperty(entity, "UIGridMaxColumns", "String"));		
		}
		
	}
	foreach(PropertyInfo property in entity.Properties.Where(p=>p.IsNavigationPropertyMany == false && p.IsPrimaryKey== false && p.Name.ToLower() != "isdeleted" && p.Visible && p.VisibleInForm && (bool)GetCustomProperty(p, "IsHidden", "Boolean")== false).OrderBy(p=>p.Order)){	
		string visibilityCondition = "";
			if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIVisibilityCondition", "String"))){
					visibilityCondition =(string)GetCustomProperty(property, "UIVisibilityCondition", "String");
				}
			
		if(!string.IsNullOrEmpty(visibilityCondition)) {#>
<%	if (Model != null ) {
		if (Model.<#= visibilityCondition #>)
		{ %>
<#+ 	}
		uiSpace = 0.00m;
		cols = 0;
		
		// Espacio que se le destinará a lo ancho
		if ((bool)GetCustomProperty(entity, "UIMultiColumn", "Boolean")){
			var percentSpace = (string)GetCustomProperty(property, "UISpace", "String");
			//Write(percentSpace.ToString());
			if (!string.IsNullOrEmpty(percentSpace)){
				percentSpace = percentSpace.Replace("%",""); 
				uiSpace = Convert.ToDecimal(percentSpace);
				uiSpace = uiSpace / 100.00m;
				cols = Convert.ToInt32(uiSpace * UIGridFormColumns);
				gridClassField = "grid_" + cols.ToString();
				gridClassContainer = "grid_" + cols.ToString();
			}
		}else{
			gridClassField = "grid_7";
			gridClassContainer = "";
		}
				// si ya suman el 100 por ciento de lo ancho disponible
		
		if ((sumRowCols + uiSpace) > 1.00m){#>
				<div class="clear"></div>
		
<#+			// se reinicia el contador para una nueva fila
			sumRowCols = 0.00m; 
		}
		string editorOrDisplay = defaultFormMode.ToLower();
		
			if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIFieldMode", "String"))){
				editorOrDisplay = ((string)GetCustomProperty(property, "UIFieldMode", "String")).ToLower();
			}
		
		
	if (editorOrDisplay == "edit"){
		if (property.IsNavigationProperty) { #>

<#+ 		string safeName = property.Name;
			string entityFKType = null;
				try{		
					entityFKType = entity.NavigationProperties.Find(p=>p.PropertyName == property.Name).EntityType;
				}catch(Exception ex){
					throw new Exception(entity.Name);
				}
				var entityFKName = entityFKType.Split(char.Parse("."))[entityFKType.Split(char.Parse(".")).Length -1];
				var entityFK = entity.Model.Entities.Find(p=>p.Name == entityFKName);
				var keyEntityFK = entityFK.Properties.Find(p=>p.IsPrimaryKey);
				var entityFKDefaultColumn = entityFK.DefaultProperty?? entityFK.Properties[0].Name;
				
				
				safeName = "Fk"+property.Name; 

			
			
#>
<%        if (fromFK != "<#= property.Name #>")
          { %>
			<div id="dc<#= property.Name #>" class="li focushl <#= gridClassContainer #>">
				<div class="spacetop spacebottom">
				<div class="grid_<%=UILabelColumns.ToString() %> alpha desc"><%: Html.LabelRequiredFor(m=>m.<#= safeName #>, "label" ) %></div>
<#+ 		if (property.PerformanceOption != PerformanceOptions.Fill || (bool)GetCustomProperty(property, "UILookUp", "Boolean")) {#> 				
				<div class="<#= gridClassField #> omega editor-field"><%: Html.EditorFor(m=>m.<#= safeName #>, new { DisplayText=Model.Fk<#= property.Name #>Text  }) %>
<#+ 		}else{ 
				
			string getAction ="GetAll";	
			if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIGetAction", "String"))){
					getAction= (string)GetCustomProperty(property, "UIGetAction", "String");
			}
			string displayText = entityFKDefaultColumn;
			if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIDisplayText", "String"))){
					displayText= (string)GetCustomProperty(property, "UIDisplayText", "String");
			}
	
				if ((bool)GetCustomProperty(property, "UIStartEmpty", "Boolean")) {#>
				<div class="<#= gridClassField #> omega editor-field"><%: Html.DropDownListFor(m=>m.<#= safeName #>, new List<SelectListItem>(), "--" + GlobalMessages.SELECT + "--") %>
<#+ 			}else{ #>
				<div class="<#= gridClassField #> omega editor-field"><%: Html.DropDownListFor(m=>m.<#= safeName #>, new SelectList((new <#= entity.Model.Namespace #>.Web.Mvc.Controllers.<#= entityFK.SetName #>Controller()).<#= getAction #>(), "<#= keyEntityFK.Name #>", "<#= displayText #>"), "--" + GlobalMessages.SELECT + "--") %>
<#+ 			} #>				
<#+ 		} #>
				<div class="errorMessage"><%: Html.ValidationMessageFor(m => m.<#= safeName #>)%></div>
			
				</div>
				<div class="clear"></div>

				</div>
	        </div>
<%      }else{%>
          <input type="hidden" name="Fk<%:fromFK %>" id="Fk<%:fromFK %>" value="<%: fkValue %>" />
<%} %>
<#+ 	}else if (property.Type.ToLower()== "selectitemlist"){ #>
			<div id="dc<#= property.Name #>" class="li focushl <#= gridClassContainer #>">
				<div class="spacetop spacebottom">
				<div class="grid_<%=UILabelColumns.ToString() %> alpha desc"><%: Html.LabelRequiredFor(m=>m.<#= property.Name #>Value, "label" ) %></div>
				<div class="<#= gridClassField #> omega editor-field"><%: Html.DropDownListFor(m=>m.<#= property.Name #>Value, new SelectList(Model.<#= property.Name #>List, "Value", "Text")) %>
				<div class="errorMessage"><%: Html.ValidationMessageFor(m => m.<#= property.Name #>Value)%></div>
			
				</div>
				<div class="clear"></div>

				</div>
	        </div>
<#+ 	}else{ #>
<#+ 		if (property.Type.ToLower() == "include") {
				if(!string.IsNullOrEmpty((string)GetCustomProperty(property, "FormLayout", "String"))) {#>
			<div id="dc<#= property.Name #>" class="li focushl <#= gridClassContainer #>">
				<div class="spacetop spacebottom">
				<div class="grid_<%=UILabelColumns.ToString() %> alpha desc">
				&nbsp;
				</div>
				<div class="<#= gridClassField #> omega editor-field">
					<% Html.RenderPartialIfExist(pathview + "<#= entity.Name #><#= property.Name #>" + extensionview, Model); %>
				
				</div>
				<div class="clear"></div>

				</div>
	        </div>
<#+				}else{ #>
			<% Html.RenderPartialIfExist(pathview + "<#= entity.Name #><#= property.Name #>" + extensionview, Model); %>

<#+ 		}
			}else if(property.Type.ToLower() == "uigroup"){ #>

<#+ 		}else{ #>
			<div id="dc<#= property.Name #>" class="li focushl <#= gridClassContainer #>">
				<div class="spacetop spacebottom">
				<div class="grid_<%=UILabelColumns.ToString() %> alpha desc">
<#+ if (property.Type.ToLower().Contains("boolean")) { #>
				&nbsp;
				</div>
<#+ 		
			if (!((Boolean)GetCustomProperty(property, "UIReadOnly", "Boolean"))) {#>				
				<div class="<#= gridClassField #> omega editor-field"><%: Html.EditorFor(m=>m.<#= property.Name #>) %> <%: Html.LabelRequiredFor(m=>m.<#= property.Name #>, "label" ) %>
<#+ 		}else { #>
				<div class="<#= gridClassField #> omega editor-field"><%: Html.DisplayFor(m=>m.<#= property.Name #>) %>				
<#+ 		} #>
				
<#+ }else if (property.Type.ToLower().Contains("captcha")) { #>
				<%: Html.LabelRequiredFor(m=>m.<#= property.Name #>, "label" ) %></div>
				<div class="<#= gridClassField #> omega editor-field"><%= Html.GenerateCaptcha() %>

				
<#+ }else{ #>
				<%: Html.LabelRequiredFor(m=>m.<#= property.Name #>, "label" ) %></div>
<#+ 		
			if (!((Boolean)GetCustomProperty(property, "UIReadOnly", "Boolean"))) {#>				
				<div class="<#= gridClassField #> omega editor-field"><%: Html.EditorFor(m=>m.<#= property.Name #>) %>
<#+ 		}else { #>
				<div class="<#= gridClassField #> omega editor-field"><%: Html.DisplayFor(m=>m.<#= property.Name #>) %>				
<#+ 		} #>
				
<#+ } #>
				<div class="errorMessage"><%: Html.ValidationMessageFor(m => m.<#= property.Name #>)%></div>
			
				</div>
				<div class="clear"></div>

				</div>
	        </div>

<#+ 		} #>				
<#+ 	}
	}else if (editorOrDisplay.ToLower() == "display"){
		if (property.IsNavigationProperty)  { #>
			<div id="dc<#= property.Name #>" class="li <#= gridClassContainer #>">
				<div class="spacetop spacebottom">
					<div class="grid_<%=UILabelColumns.ToString() %> alpha desc"><%: Html.LabelFor(m=>m.Fk<#= property.Name #>) %></div>
					<div class="<#= gridClassField #> omega display-field"><span id="" ><%: Model.Fk<#= property.Name #>Text %></span>
					</div>
					<div class="clear"></div>

				</div>
	        </div>
<#+ 	}else if (property.Type.ToLower()== "selectitemlist"){ #>
			<div id="dc<#= property.Name #>" class="li <#= gridClassContainer #>">
				<div class="spacetop spacebottom">
					<div class="grid_<%=UILabelColumns.ToString() %> alpha desc"><%: Html.LabelFor(m=>m.<#= property.Name #>Value) %></div>
					<div class="<#= gridClassField #> omega display-field"><span id="" ><%: Model.<#= property.Name #>Text %></span>
					</div>
					<div class="clear"></div>

				</div>
	        </div>
<#+ 	}else{ #>
<#+ 		if (property.Type.ToLower() == "include") {#>
<#+						if(!string.IsNullOrEmpty((string)GetCustomProperty(property, "FormLayout", "String"))) {#>
			<div id="dc<#= property.Name #>" class="li focushl <#= gridClassContainer #>">
				<div class="spacetop spacebottom">
				<div class="grid_<%=UILabelColumns.ToString() %> alpha desc">
				&nbsp;
				</div>
				<div class="<#= gridClassField #> omega display-field">
					<% Html.RenderPartialIfExist(pathview + "<#= entity.Name #><#= property.Name #>" + extensionview, Model); %>
				
				</div>
				<div class="clear"></div>

				</div>
	        </div>
<#+				}else{ #>
			<% Html.RenderPartialIfExist(pathview + "<#= entity.Name #><#= property.Name #>" + extensionview, Model); %>

<#+ 		}    #>
<#+ 		}else{ #>
			
			<div id="dc<#= property.Name #>" class="li <#= gridClassContainer #>">
				<div class="spacetop spacebottom">
					<div class="grid_<%=UILabelColumns.ToString() %> alpha desc"><%: Html.LabelFor(m=>m.<#= property.Name #>) %></div>
					<div class="<#= gridClassField #> omega display-field"><%: Html.DisplayFor(m=>m.<#= property.Name #>) %>
					</div>
					<div class="clear"></div>

				</div>
	        </div>
<#+ 		} #>
<#+ 	} 
		
	} #>
<#+			if(!string.IsNullOrEmpty(visibilityCondition)) {#>
	<% }
	}
	%>
<#+ 	} #>
<#+	
		sumRowCols += uiSpace;
	} #>
<#+ if (((bool)GetCustomProperty(entity, "UIExcludeEditButtons","Boolean")) == false) { #>
			<div class="li focushl buttons">
				<div class="spacetop spacebottom">
				<div class="grid_<%=UILabelColumns.ToString() %> alpha desc">   &nbsp;</div>
				<div class="<#= gridClassField #> omega editor-field">
<% if (ViewData["ispopup"] != null)
   { %>			
				<% Html.RenderPartial("ButtonLink", ButtonLinkModel.GetSave()); %> 
				<% Html.RenderPartial("ButtonLink", ButtonLinkModel.GetClosePopUp()); %>
<%}
   else
   { %>
				<% Html.RenderPartial("ButtonLink", ButtonLinkModel.GetSave()); %> 
				<% Html.RenderPartial("ButtonLink", ButtonLinkModel.GetCustom(GlobalMessages.CANCEL, 3, "cancel", ResolveUrl("~/")+"<#= entityPluralName #>", true)); %>
<% } %>		
				</div>
		
			<div class="clear"></div>
			</div>
           </div>
<#+ } #>
			<% Html.EndForm(); %>
		</div>
	</div>
</div>
<script>
$(document).ready(function(){
<#+
	var prop = entity.Properties.FindAll(p=>p.IsNavigationProperty== false && p.IsPrimaryKey == false);
	if (prop.Count > 0){	
#>
	$('#<#= prop[0].Name #>').focus();
	$('#<#= prop[0].Name #>').select();
	refreshForms();
<#+ } #>	
});
</script>
<% if (ViewData["ispopup"] != null)
   { %>
        

   </div>
</div>
<%} %>
<#+
		}catch(Exception ex){
		throw new Exception(string.Format("El error ocurrió en la entidad {0}",entity.Name),ex);
	}
}
#>
