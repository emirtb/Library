<#@ template debug="True" language="C#V3.5" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>

<#@ import namespace="SFSdotNet.VSAddin2012.Model" #> 
<#@ import namespace="SFSdotNet.VSAddin2012.Model.Utils" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ dom processor="SFSEdmxProcessor"  
requires="EntityModel='$safenamespace$Model.edmx'"  #>
<#@ include file="Entity.MVC.tt"  #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using MvcSiteMapProvider.Extensibility;
using <#= Model.Namespace #>.Web.Mvc.Resources;

namespace <#= Model.Namespace #>.Web.Mvc
{
    public partial class DynamicNodeProvider : DynamicNodeProviderBase
    {
        partial void OnCreatingNodes(object sender, ref List<DynamicNode> nodes);
        partial void OnCreatedNodes(object sender, ref List<DynamicNode> nodes);
   
        public override IEnumerable<DynamicNode> GetDynamicNodeCollection()
        {
            List<DynamicNode> nodes = new List<DynamicNode>();
            DynamicNode node = null;
            
			node = new DynamicNode();
            node.Title = ModuleResources.MODULE_NAME;
            node.Controller = "Navigation";
            node.Area = "";
            node.Action = "Index";
            node.Key = "<#= Model.SafeNamespace #>";
			node.RouteValues.Add("id", node.Key);
 			node.Attributes.Add("moduleKey", "<#= Model.SafeNamespace #>");
            node.Attributes.Add("permissionKey", "r");            
            nodes.Add(node);


            node = new DynamicNode();
            node.Title = ModuleResources.CATALOGS;
            node.Controller = "Navigation";
            node.Area = "";
            node.Action = "Index";
            node.Key = "<#= Model.SafeNamespace #>_Catalogs";
			node.RouteValues.Add("id", node.Key);
			node.ParentKey = "<#= Model.SafeNamespace #>";
            nodes.Add(node);
			
			
            node = new DynamicNode();
            node.Title = ModuleResources.CATALOGS_OTHERS;
            node.Controller = "Navigation";
            node.Area = "";
            node.Action = "Index";
            node.Key = "<#= Model.SafeNamespace #>_Catalogs_Others";
			node.RouteValues.Add("id", node.Key);
			node.ParentKey = "<#= Model.SafeNamespace #>_Catalogs";
            nodes.Add(node);
            OnCreatingNodes(this, ref nodes);


<# 	string excludeFromSiteMap = (string)GetCustomProperty(Model, "UIExcludeFromSiteMap", "string");
	List<string> excludes = new List<string>();

	bool excludeAll = false;
	if(!string.IsNullOrEmpty(excludeFromSiteMap)){
		if (excludeFromSiteMap == "*"){
			excludeAll = true;
		}else{
			foreach (var ex in excludeFromSiteMap.Split(char.Parse("|"))){
				excludes.Add(ex);
			}
		}
	}			
	List<EntityInfo> entitiesForSiteMap = new List<EntityInfo>();
	if (excludeAll ){
		foreach (var entity in Model.Entities.Where(p=>(bool)GetCustomProperty(p,"UIIncludeInSiteMap", "Boolean")))
			{
				 entitiesForSiteMap.Add(entity);
			}
	}else{
		foreach (var entity in Model.Entities)
			{
				if (!excludes.Contains(entity.Name))
				 	entitiesForSiteMap.Add(entity);
			}
	}
	foreach( var entity in entitiesForSiteMap) { 
		bool include = true;
		if (!string.IsNullOrEmpty((string)GetCustomProperty(entity,"UIIncludeInSiteMap", "string")))
			include = (bool)GetCustomProperty(entity,"UIIncludeInSiteMap", "Boolean");
		if (include){
			
	#>
			#region <#= entity.Name #>
            node = new DynamicNode();
            node.Title = <#= Code.MakeSingle(entity.Name) #>Resources.ENTITY_PLURAL;
            node.Controller = "<#= entity.SetName #>";
            node.Area = "<#= entity.Model.SafeNamespace #>";
            node.Action = "Index";
            node.Key = "<#= Model.SafeNamespace #>_<#= entity.Name #>_List";
			node.ParentKey = "<#= Model.SafeNamespace #>_Catalogs_Others";
 			node.Attributes.Add("moduleKey", "<#= entity.Model.SafeNamespace #>");
            node.Attributes.Add("businessObjectKey", "<#= entity.Name #>");
            node.Attributes.Add("permissionKey", "r");            
			nodes.Add(node);

			// Create
			node = new DynamicNode();
            node.Title = <#= Code.MakeSingle(entity.Name) #>Resources.<#= entity.SetName.ToUpper() #>_ADD_NEW;
            node.Controller = "<#= entity.SetName #>";
            node.Area = "<#= entity.Model.SafeNamespace #>";
            node.Action = "CreateGen";
            node.Key = "<#= Model.SafeNamespace #>_<#= entity.Name #>_Create";
			node.ParentKey = "<#= Model.SafeNamespace #>_<#= entity.Name #>_List";
			node.Attributes.Add("visiblemenu", "false");
			
			
            nodes.Add(node);

			// Edit
			//node = new DynamicNode();
            //node.Title = <#= Code.MakeSingle(entity.Name) #>Resources.<#= entity.SetName.ToUpper() #>_EDIT;
            //node.Controller = "<#= entity.SetName #>";
            //node.Area = "<#= entity.Model.SafeNamespace #>";
            //node.Action = "EditGen";
            //node.Key = "<#= Model.SafeNamespace #>_<#= entity.Name #>_Edit";
			//node.ParentKey = "<#= Model.SafeNamespace #>_<#= entity.Name #>_List";
			//node.Attributes.Add("visible", "false");
			//node.Attributes.Add("dynamicParameters", "id");
			//node.Attributes.Add("isDynamic", "true");
            //nodes.Add(node);

			// Details
			//node = new DynamicNode();
            //node.Title = <#= Code.MakeSingle(entity.Name) #>Resources.<#= entity.SetName.ToUpper() #>_DETAILS;
            //node.Controller = "<#= entity.SetName #>";
            //node.Area = "<#= entity.Model.SafeNamespace #>";
            //node.Action = "DetailsGen";
            //node.Key = "<#= Model.SafeNamespace #>_<#= entity.Name #>_Details";
			//node.ParentKey = "<#= Model.SafeNamespace #>_<#= entity.Name #>_List";
			//node.Attributes.Add("visible", "false");
			//node.Attributes.Add("dynamicParameters", "id");
			//node.Attributes.Add("isDynamic", "true");
            //nodes.Add(node);

			#endregion
<# 			}
		} #>

 			OnCreatedNodes(this, ref nodes);
			//nodes = nodes.OrderBy(p => p.Title).ToList();
            return nodes;
        }
    }
}