<#@ output  extension="txt" #>
<#@ template language="C#v3.5" #>
<#@ assembly name="System.Core.dll" #>

<#@ import namespace="SFSdotNet.VSAddin2012.Model" #>
<#@ import namespace="SFSdotNet.VSAddin2012.Model.Utils" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
// <Template>
//   <SolutionTemplate></SolutionTemplate>
//   <Version>20110124.1</Version>
//   <Update></Update>
// </Template>
<#+ void GenerateModel(EntityInfo entity)
{ 
	try{
		entityPluralName = entity.SetName;
		string folderModelsName = entityPluralName;
		if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "RelativeFolder", "String"))){
			folderModelsName = (string)GetCustomProperty(entity, "RelativeFolder", "String");
	}

	#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ComponentModel.DataAnnotations;
using <#= entity.Model.Namespace #>.Web.Mvc.Resources;
using System.Runtime.Serialization;
using SFSdotNet.Framework.Web.Mvc.Models;
using SFSdotNet.Framework.Web.Mvc.Extensions;
using BO = <#= entity.Model.Namespace #>.BusinessObjects;
using System.Web.Mvc;
using SFSdotNet.Framework.Web.Mvc.Validation;
using SFSdotNet.Framework.Web.Mvc.Models;
using SFSdotNet.Framework.Web.Mvc.Resources;
using SFSdotNet.Framework.Entities.Metadata;


namespace <#= entity.Model.Namespace #>.Web.Mvc.Models.<#= folderModelsName #> 
{
	public partial class <#=entity.Name#>Model: ModelBase{
		public <#= entity.Name#>Model()
        {
<#+ foreach(PropertyInfo property in entity.Properties.Where(p=>p.Type.ToLower() == "selectitemlist")) { #>		
            this.<#= property.Name #>List = new List<System.Web.Mvc.SelectListItem>();
<#+ } #>
		}
	<#+ if (entity.Properties.FirstOrDefault(p=>p.IsPrimaryKey) != null ) { #>
	public override string Id
        {
            get
            {
                return this.<#= entity.Properties.FirstOrDefault(p=>p.IsPrimaryKey).Name #>.ToString();
            }
        }
<#+ } #>			
<#+ if (!string.IsNullOrEmpty(entity.DefaultProperty)) { #>			
        public override string ToString()
        {
<#+ var _prop	=entity.Properties.Where(p=>p.Name == entity.DefaultProperty).FirstOrDefault();
	if (_prop.Nullable ) { #>
			if (this.<#= _prop.Name #> != null)
<#+ } #>		
            return this.<#= entity.DefaultProperty #>.ToString();
<#+ if (_prop.Nullable ) { #>
			else
				return "";
<#+ } #>		
        }    
<#+ } #>			
<#+	bool defaultFilterable = false;
	if (GetCustomProperty(entity.Model, "DefaultFilterable", "Object") != null )
		defaultFilterable = (bool)GetCustomProperty(entity.Model, "DefaultFilterable", "Boolean");
	if (GetCustomProperty(entity, "DefaultFilterable", "Object") != null )
		defaultFilterable = (bool)GetCustomProperty(entity, "DefaultFilterable", "Boolean");
	
foreach(PropertyInfo property in entity.Properties.FindAll(p=>p.IsNavigationPropertyMany==false && p.Type.ToLower() !="include" && p.Type.ToLower() !="uigroup"   )) {#>	
<#+ 			string type = "";
		bool filterable = defaultFilterable;
		if (GetCustomProperty(property, "Filterable", "Object") != null )
			filterable = (bool)GetCustomProperty(property, "Filterable", "Boolean");
		
		if (property.IsPrimaryKey)  {
			
				type= property.Type;
#>
		[SystemProperty()]		
		public <#= type #><#=NullableSymbol(property)#> <#=property.Name#>{ get; set; }
<#+ 	}else{ 
		
			type= property.Type;
#>
<#+ if (property.VisibleInGrid) { #>
[Exportable()]
<#+ } #>
<#+ 
if (!property.Visible || !property.VisibleInForm){ #>
	[IsVisible(false)]
<#+}	
	if (!property.Type.ToLower().Contains("captcha") && IsVisibleProperty(property) && (!property.Nullable || property.UIRequired ) && property.IsNavigationProperty== false && (property.Visible && property.VisibleInForm)) {#>	
	    [Required(AllowEmptyStrings=false, ErrorMessageResourceName="VAL_<#= property.Name.ToUpper() #>_REQUIRED", ErrorMessageResourceType=typeof(<#= entity.Name #>Resources))]
<#+ }else if (!property.Nullable && property.PerformanceOption != PerformanceOptions.Fill && property.IsNavigationProperty) { #>
    [HiddenRequired(AllowEmptyStrings = false, ErrorMessageResourceName = "VAL_<#= property.Name.ToUpper() #>_REQUIRED", ErrorMessageResourceType = typeof(<#= entity.Name #>Resources))]		
<#+ } #>		
<#+ string safeName = property.Name;
	
	if (property.IsNavigationProperty) {
		string entityFKType ="";
		safeName = "Fk"+property.Name; 
		try{ 
			entityFKType	= entity.NavigationProperties.Find(p=>p.PropertyName == property.Name).EntityType;
		}catch{
			throw new Exception(entity.Name);
		}
		var entityFKName = entityFKType.Split(char.Parse("."))[entityFKType.Split(char.Parse(".")).Length -1];
		var entityFK = entity.Model.Entities.Find(p=>p.Name == entityFKName);
		var keyEntityFK = entityFK.Properties.Find(p=>p.IsPrimaryKey);
		type = keyEntityFK.Type;
		string displayText = entityFK.DefaultProperty;
		if (string.IsNullOrEmpty(displayText))
			displayText = entityFK.Properties[0].Name;
			string getAction ="GetByJson";
		if (property.PerformanceOption != PerformanceOptions.Fill || (bool)GetCustomProperty(property, "UILookUp", "Boolean")) {
			
			if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIGetAction", "String"))){
					getAction= (string)GetCustomProperty(property, "UIGetAction", "String");
			}
			if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIDisplayText", "String"))){
					displayText= (string)GetCustomProperty(property, "UIDisplayText", "String");
			}
			#>
<#+ if (!string.IsNullOrEmpty(entityFK.DefaultProperty) && entityFK.Properties.FirstOrDefault(p=>p.IsPrimaryKey) != null )  {#>	
<#+ 	if (filterable) { #>
			[RelationFilterable( FiltrablePropertyPathName="<#=property.Name#>.<#= entityFK.Properties.FirstOrDefault(p=>p.IsPrimaryKey).Name #>")]
<#+ 	} #>
<#+ 	if ((bool)GetCustomProperty(property, "UILookUp", "Boolean")) { #>
	[LookUp("<#= Model.SafeNamespace #>","<#= entityFK.SetName #>", "ListViewGen", "<#= displayText #>", "<#= entityFK.Properties.FirstOrDefault(p=>p.IsPrimaryKey).Name #>")]	
<#+ 	}else{ #>
	[AutoComplete("<#= entityFK.SetName #>", "<#= getAction #>", "filter", "<#= displayText #>", "<#= entityFK.Properties.FirstOrDefault(p=>p.IsPrimaryKey).Name #>")]	
<#+ 	} #>
<#+ } #>
<#+		}else{
			getAction ="GetAll";	
			if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIGetAction", "String"))){
					getAction= (string)GetCustomProperty(property, "UIGetAction", "String");
			}
			if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIDisplayText", "String"))){
					displayText= (string)GetCustomProperty(property, "UIDisplayText", "String");
			}
			// si no es llenado OnDemand entonces se asume que es un combo lleno
			string controllerName = entityFK.SetName;  
	#>
	[RelationFilterable(DataClassProvider = typeof(Controllers.<#= controllerName #>Controller), GetByKeyMethod="GetByKey", GetAllMethod = "<#= getAction #>", DataPropertyText = "<#= displayText != null ? displayText : entityFK.Properties[0].Name #>", DataPropertyValue = "<#= entityFK.Properties.FirstOrDefault(p=>p.IsPrimaryKey).Name #>", FiltrablePropertyPathName="<#= property.Name #>.<#= entityFK.Properties.FirstOrDefault(p=>p.IsPrimaryKey).Name #>")]	

<#+ 	}
	} #>
<#+ string uiTemplate = (string)GetCustomProperty(property, "UITemplate", "String");
	string regularExpression = (string)GetCustomProperty(property, "RegularExpression", "String");
	string remoteVal = (string)GetCustomProperty(property, "RemoteValidationAction", "String");
if (filterable && property.IsNavigationProperty==false) { #>
	[RelationFilterable()]
<#+ } #>
<#+
	if (IsSystemProperty(property)){  #>
	[SystemProperty()]
<#+ }#>
<#+	if (property.Type=="String" && property.MaxLength == 0)  {#>
	[DataType("RichEditorAdvanced")]
<#+ }else if(!string.IsNullOrEmpty(uiTemplate)){ #>	
	[DataType("<#= uiTemplate #>")]
<#+ }else if (property.Type.ToLower().Contains("binary")){ #> 
	[DataType("File")]
<#+ }else if(property.Type.ToLower().Contains("int")){ #>
	[DataType("Integer")]
<#+ }else if(property.Type.ToLower().Contains("timespan") || property.Type.ToLower().Contains("datetime")) { 
		string showDate = "true";
		string showTime = "false";
		string customMinutes = "null";
		if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIMinutes", "String"))){
			customMinutes = @""""+ (string)GetCustomProperty(property, "UIMinutes", "String") + @"""";
		}
		
		
		if (property.Type.ToLower().Contains("timespan")){
			showDate = "false";
			showTime = "true";
		}else if (property.Type.ToLower().Contains("datetime")){
			showTime ="false";
			showDate = "true";
		}
		if ((bool)GetCustomProperty(property, "UIShowTime", "Boolean")){
			showTime = "true";
		}
		
	
	#>
	[DateTime(<#= showDate #>, <#= showTime #>, <#= customMinutes #>)]	
<#+ } #>
<#+ if (!string.IsNullOrEmpty(regularExpression)) { #>
	[RegularExpression(@"<#= regularExpression #>", ErrorMessageResourceName="VAL_FORMAT_ERROR", ErrorMessageResourceType=typeof(GlobalMessages))]
<#+ } #>
<#+ 
	string _controllerName = entityPluralName;
	if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "ControllerName", "String")))
		{
			_controllerName =(string)GetCustomProperty(entity, "ControllerName", "String");
		}
	if (!string.IsNullOrEmpty(remoteVal)) { #>
	[Remote("<#= remoteVal #>", "<#= _controllerName #>", AdditionalFields="Initial<#= property.Name #>")]
<#+ } #>
	[LocalizedDisplayName("<#= property.Name.ToUpper() #>", NameResourceType=typeof(<#= entity.Name #>Resources))]
<#+ if (property.Type.ToLower() == "selectitemlist") { #>
    public string <#= property.Name #>Value { get; set; }
	public List<System.Web.Mvc.SelctListItem>  <#= property.Name #>List { get; set; }
	[Exportable()]
	public string  <#= property.Name #>Text { get; set; }
<#+ }else{ 
		string nullable_ = NullableSymbol(property);
		if (property.IsNavigationProperty)
		{
			var entityFKType2	= entity.NavigationProperties.Find(p=>p.PropertyName == property.Name).EntityType;
			var entityFKName2 = entityFKType2.Split(char.Parse("."))[entityFKType2.Split(char.Parse(".")).Length -1];
			var entityFK2 = entity.Model.Entities.Find(p=>p.Name == entityFKName2);
			var keyEntityFK2 = entityFK2.Properties.Find(p=>p.IsPrimaryKey);
			nullable_ = NullableSymbol(keyEntityFK2);
		}
		
	string safeType = type;
	if (safeType == "Binary")
		safeType = "Byte[]";
		
	if (type.ToLower().Contains("captcha") || type.ToLower().Contains("xml"))
		safeType = "string";
	if (type.ToLower().Contains("xml"))
		WriteLine("[System.Web.Script.Serialization.ScriptIgnore()]"); #>
	public <#= safeType #>  <#=  nullable_ #> <#=safeName#> { get; set; }
<#+ } #>
<#+ if (property.Type.ToLower() == "datetime") { #>
	public string <#= property.Name #>Text {
        get {
            if (<#= property.Name #> != null)
<#+ 		if(!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIFormat", "String"))){	 #>	
                return ((DateTime)<#= property.Name #>).ToString("<#= (string)GetCustomProperty(property, "UIFormat", "String") #>");

<#+ }else{ #>			
                return ((DateTime)<#= property.Name #>).ToShortDateString();
<#+ } #>
            else
                return String.Empty;
        }
				set{
				this.<#= property.Name #> = Convert.ToDateTime(value);
    }
		}
<#+ }else if(property.Type.ToLower() == "timespan") { #>
		public string <#= property.Name #>Text {
        get {
            if (<#= property.Name #> != null)
                return new DateTime(((TimeSpan)<#= property.Name #>).Ticks).ToString("hh:mm tt");
            else
                return String.Empty;
        }
				set{
				this.<#= property.Name #> = Convert.ToDateTime("12/12/2000 " + value).TimeOfDay;
    }
		}
<#+ }else if((property.Type.ToLower() == "decimal" || property.Type.ToLower().Contains("int")) && property.IsNavigationProperty==false) { #>
    public string <#= property.Name #>Text {
        get {
<#+ 	if (property.Nullable) {#>	
            if (<#= property.Name #> != null)
<#+ 		//Aplicar formato si esta especificado
			if(!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIFormat", "String"))){	
			#>
			
                return string.Format("<#= (string)GetCustomProperty(property, "UIFormat", "String") #>", <#= property.Name #>);
<#+ 		}else{ #>
				return <#= property.Name #>.ToString();
<#+ 		} #>				
            else
                return String.Empty;
<#+ 	}else{ 
			//Aplicar formato si esta especificado
			if(!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIFormat", "String"))){	
			#>
                return string.Format("<#= (string)GetCustomProperty(property, "UIFormat", "String") #>", <#= property.Name #>);
<#+ 		}else{ #>
				return <#= property.Name #>.ToString();
<#+ 		}
		} #>				
        }
        
    }

<#+ } // Termina condicion int, decimal no nav 
#>
	<#+ if (property.IsNavigationProperty) { #>
	[LocalizedDisplayName("<#= property.Name.ToUpper() #>", NameResourceType=typeof(<#= entity.Name #>Resources))]
	[Exportable()]
	public string  Fk<#= property.Name #>Text { get; set; }
    public string FK<#= property.Name #>SafeKey { get; set; }

<#+ } #>	
<#+ } #>
		
<#+ }#>
		
<#+ foreach (var property in entity.Properties.Where(p=>p.IsNavigationPropertyMany )) { 

		bool filterable = defaultFilterable;
		if (GetCustomProperty(entity, "Filterable", "Object") != null )
			filterable = (bool)GetCustomProperty(entity, "Filterable", "Boolean");
		if (filterable) {	
			string _entityFKType ="";

			try{ 
				_entityFKType	= entity.NavigationProperties.Find(p=>p.PropertyName == property.Name).EntityType;
			}catch{
				throw new Exception(entity.Name);
			}
			var _entityFKName = _entityFKType.Split(char.Parse("."))[_entityFKType.Split(char.Parse(".")).Length -1];
			var _entityFK = entity.Model.Entities.Find(p=>p.Name == _entityFKName);
			var _keyEntityFK = _entityFK.Properties.Find(p=>p.IsPrimaryKey);
			var _type = _keyEntityFK.Type;
			string _displayText = _entityFK.DefaultProperty;


			#>
		[LocalizedDisplayName("<#= property.Name.ToUpper() #>", NameResourceType=typeof(<#= entity.Name #>Resources))]
		[RelationFilterable(IsNavigationPropertyMany=true, FiltrablePropertyPathName="<#= property.Name #>.Count()", ModelPartialType="<#= _entityFK.SetName #>.<#= Code.MakeSingle(_entityFKName) #>")]
        public List<<#= _entityFK.SetName #>.<#= _entityFKName #>Model> <#= property.Name #> { get; set; }			
	
<#+ 	}
	} #>
	public override string SafeKey
   	{
		get
        {
<#+ System.Text.StringBuilder sbKeysNotNull = new System.Text.StringBuilder();
	System.Text.StringBuilder sbKeys = new System.Text.StringBuilder(); 
	foreach(PropertyInfo property in entity.Properties.Where(p=>p.IsPrimaryKey)){
		if (sbKeys.Length > 0)
			sbKeys.Append(", ");
		if (sbKeysNotNull.Length > 0)
			sbKeysNotNull.Append(" && ");

		sbKeys.Append(string.Format(@"""{0}""",property.Name));
		sbKeysNotNull.Append(string.Format(@"this.{0} != null", property.Name));
	}
#>			if(<#= sbKeysNotNull.ToString() #>)
				return SFSdotNet.Framework.Entities.Utils.GetKey(this ,<#= sbKeys.ToString() #>).Replace("/","-");
			else
				return String.Empty;
		}
    }		
		public void Bind(<#= entity.Name #>Model model){
            
<#+ foreach(PropertyInfo property in entity.Properties.Where(p=>p.IsNavigationProperty==false && p.Type.ToLower() !="include" && p.Type.ToLower() !="uigroup" && !p.Type.ToLower().Contains("captcha"))) { #>
<#+ if (property.Type.ToLower()== "selectitemlist") { #>
		this.<#= property.Name #>List = model.<#= property.Name #>List;
this.<#= property.Name #>Value = model.<#= property.Name #>Value;

<#+ 	}else{ #>
		this.<#= property.Name #> = model.<#= property.Name #>;
<#+ 	}
	} #>
        }

        public BusinessObjects.<#= entity.Name #> GetBusinessObject()
        {
            BusinessObjects.<#= entity.Name #> result = new BusinessObjects.<#= entity.Name #>();
<#+ foreach(PropertyInfo property in entity.Properties.Where(p=>p.IsNavigationPropertyMany==false && p.Type.ToLower() !="include" && p.Type.ToLower() !="uigroup" && !p.Type.ToLower().Contains("captcha"))) { #>
<#+ 	string Trim = "";
		if(property.IsNavigationProperty) { 
			var entityFKType = entity.NavigationProperties.Find(p=>p.PropertyName == property.Name).EntityType;
			var entityFKName = entityFKType.Split(char.Parse("."))[entityFKType.Split(char.Parse(".")).Length -1];
			var entityFK = entity.Model.Entities.Find(p=>p.Name == entityFKName);
			var keysEntityFK = entityFK.Properties.FindAll(p=>p.IsPrimaryKey);
		
			sbKeys = new System.Text.StringBuilder(); 
			foreach(PropertyInfo propertyKey in keysEntityFK){
				if (sbKeys.Length > 0)
					sbKeys.Append(", ");
				sbKeys.Append(string.Format("{0}= ({1})this.Fk{2}",propertyKey.Name,propertyKey.Type, property.Name ));
			}
	#>
<#+ 		if (property.Nullable || !IsVisibleProperty(property)) { #>			
			if(this.Fk<#= property.Name #> != null )
<#+ } #>	result.<#= property.Name #> = new BusinessObjects.<#= entityFKName #>() { <#= sbKeys.ToString() #> };
<#+ 	}else{ #>

<#+ 		// si es tipo fecha
			if (property.Type.Contains("DateTime")) {#>
<#+ 			if (!IsVisibleProperty(property) || property.Nullable || (!property.Visible || !property.VisibleInForm)) { #>
				if(this.<#= property.Name #> != null)
					if (this.<#= property.Name #> != null)
<#+ 			} #>
				result.<#= property.Name #> = (DateTime)this.<#= property.Name #>;		
<#+ 		}else if(property.Type.Contains("TimeSpan")){ #>
<#+ 			if (!IsVisibleProperty(property) || property.Nullable || (!property.Visible || !property.VisibleInForm)) { #>
				if(this.<#= property.Name #> != null)
					if (this.<#= property.Name #> != null)
<#+ 			} #>
				result.<#= property.Name #> = (TimeSpan)this.<#= property.Name #>;		
<#+ 		}else if(property.Type.ToLower().Contains("xml")){ #>
					result.<#= property.Name #> = this.<#= property.Name #>;
			
			
<#+ 		}else if(property.Type.Contains("Binary")){ #>
				if(this.<#= property.Name #> != null)
					result.<#= property.Name #> = (Byte[])this.<#= property.Name #>;
			
<#+			}else if (property.Type.ToLower()== "selectitemlist"){ #>
		if (this.<#= property.Name #>Value != null )
				result.<#= property.Name #>Value = this.<#= property.Name #>Value;
<#+  		}else{ 
				if (property.Type.ToLower().Contains("string"))
				{
					Trim = @".Trim().Replace(""\t"", String.Empty)";
				}else{
					Trim = "";
				}#>
	if (this.<#= property.Name #> != null )
				result.<#= property.Name #> = (<#= property.Type #>)this.<#= property.Name #><#= Trim #>;
<#+ 		}
		} #>
				
<#+ } #>



            return result;
        }
        public void Bind(BusinessObjects.<#= entity.Name #> businessObject)
        {
            
<#+ foreach(PropertyInfo property in entity.Properties.Where(p=>p.IsNavigationProperty==false && p.Type.ToLower() !="include" && p.Type.ToLower() !="uigroup" && !p.Type.ToLower().Contains("captcha"))) { #>
<#+ 	string Trim = "";
		if (property.Type.Contains("DateTime")) {#>
<#+ 		if (property.Nullable) { #>
				if (businessObject.<#= property.Name #> != null )
<#+ 		} #>
				this.<#= property.Name #> = (DateTime)businessObject.<#= property.Name #>;
<#+ 	}else if(property.Type.Contains("TimeSpan")){ #>
<#+ 		if (property.Nullable) { #>
				if (businessObject.<#= property.Name #> != null )
<#+ 		} #>
				this.<#= property.Name #> = (TimeSpan)businessObject.<#= property.Name #>;

<#+		}else if (property.Type.ToLower() == "selectitemlist") { #>
		foreach(var prop in businessObject.<#= property.Name #>List){
			            this.<#= property.Name #>List.Add(new SelectListItem() { Value= prop.Key, Text= prop.Value  } );

		}
			this.<#= property.Name #>Value = businessObject.<#= property.Name #>Value;
			this.<#= property.Name #>Text = businessObject.<#= property.Name #>Text;
<#+		}else if (property.Type.ToLower() == "xml") { #>
			if (businessObject.<#= property.Name #> != null )
				this.<#= property.Name #> = businessObject.<#= property.Name #>;
<#+		}else if (property.Type.ToLower() == "binary") { #>
			if (businessObject.<#= property.Name #> != null )
				this.<#= property.Name #> = businessObject.<#= property.Name #>;			
<#+  	}else{ #>
<#+ 		if(property.Nullable) {#>				
	if (businessObject.<#= property.Name #> != null )
				this.<#= property.Name #> = (<#= property.Type #>)businessObject.<#= property.Name #>;
<#+ 		}else{
				
				if (property.Type.ToLower().Contains("string"))
				{
					Trim = @".Trim().Replace(""\t"", String.Empty)";
				}else{
					Trim = "";
				}
				
				if (property.Type.ToLower().Contains("string"))
				{#>
			this.<#= property.Name #> = businessObject.<#= property.Name #> != null ? businessObject.<#= property.Name #><#= Trim #> : "";
				
<#+ 			}else{ #>
			this.<#= property.Name #> = businessObject.<#= property.Name #><#= Trim #>;
				
<#+				}
} #>
<#+ 	} #>
<#+ } #>

<#+ foreach (NavigationPropertyInfo navprop in entity.NavigationProperties.Where(p=>p.Multiplicity != "*") ) { 
			var entityFKName = navprop.EntityType.Split(char.Parse("."))[navprop.EntityType.Split(char.Parse(".")).Length -1];
			var entityFK = entity.Model.Entities.Find(p=>p.Name == entityFKName);
			string propertyName = "";
			PropertyInfo property =null;
			var propertyKeyFK = entityFK.Properties.FirstOrDefault(p=>p.IsPrimaryKey);
			if (!string.IsNullOrEmpty(entityFK.DefaultProperty)){
				propertyName = entityFK.DefaultProperty;
				property = entityFK.Properties.FirstOrDefault(p=>p.Name == propertyName);
				}else{
				propertyName = entityFK.Properties[0].Name;
				property = entityFK.Properties[0];
				}
	#>
	        if (businessObject.<#= navprop.Property.Name #> != null){
	<#+  		if (property.Nullable && !property.IsPrimaryKey) {#>
                	this.Fk<#= navprop.Property.Name  #>Text = businessObject.<#= navprop.Property.Name #>.<#= propertyName #> != null ? businessObject.<#= navprop.Property.Name #>.<#= propertyName #>.ToString() : "";; 
<#+ 			}else if (property.IsPrimaryKey && property.Type != "String"){ #>
                	this.Fk<#= navprop.Property.Name  #>Text = businessObject.<#= navprop.Property.Name #>.<#= propertyName #>.ToString(); 
<#+ 			}else if (property.Type == "String"){ #>
                	this.Fk<#= navprop.Property.Name  #>Text = businessObject.<#= navprop.Property.Name #>.<#= propertyName #>.Trim().Replace("\t", String.Empty); 
										
<#+ 			}else{ #>
                	this.Fk<#= navprop.Property.Name  #>Text = businessObject.<#= navprop.Property.Name #>.<#= propertyName #>.ToString(); 
<#+ 			} #>										
				this.Fk<#= navprop.Property.Name  #> = businessObject.<#= navprop.Property.Name #>.<#= propertyKeyFK.Name #>;
                this.FK<#= navprop.Property.Name #>SafeKey  = SFSdotNet.Framework.Entities.Utils.GetKey(businessObject.<#= navprop.Property.Name #>,"<#= propertyKeyFK.Name #>").Replace("/","-");

			}
<#+ } #>
           
        }
	}
}
<#+ 	}catch(Exception ex){
		throw new Exception(string.Format("El error ocurrió en la entidad {0}",entity.Name),ex);
	}
}
#>
